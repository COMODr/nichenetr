% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/characterization_data_sources.R
\name{evaluate_model}
\alias{evaluate_model}
\title{Construct and evaluate a ligand-target model given input parameters.}
\usage{
evaluate_model(parameters_setting, lr_network, sig_network, gr_network, settings,...)
}
\arguments{
\item{parameters_setting}{A list containing following elements: $model_name, $source_weights, $lr_sig_hub, $gr_hub, $ltf_cutoff, $algorithm, $damping_factor, $correct_topology. See \code{prepare_settings_leave_one_in_characterization} and \code{add_hyperparameters_parameter_settings}.}

\item{lr_network}{A data frame / tibble containing ligand-receptor interactions (required columns: from, to, source)}

\item{sig_network}{A data frame / tibble containing signaling interactions (required columns: from, to, source)}

\item{gr_network}{A data frame / tibble containing gene regulatory interactions (required columns: from, to, source)}

\item{settings}{A list of lists for which each sub-list contains the following elements: .$name: name of the setting; .$from: name(s) of the ligand(s) active in the setting of interest; .$response: named logical vector indicating whether a target is a TRUE target of the possibly active ligand(s) or a FALSE.}

\item{...}{Additional arguments to \code{construct_ligand_target_matrix} such as "secondary_targets" and "remove_direct_links".}
}
\value{
A list containing following elements: $model_name, $performances_target_prediction, $performances_ligand_prediction, $performances_ligand_prediction_single
}
\description{
\code{evaluate_model} will take as input a setting of parameters (data source weights and hyperparameters) and layer-specific networks to construct a ligand-target matrix and evaluate its performance on input validation settings (both target gene prediction and ligand activity prediction).
}
\examples{
\dontrun{
settings = lapply(expression_settings_validation[1:4], convert_expression_settings_evaluation)
weights_settings_loi = prepare_settings_leave_one_in_characterization(lr_network,sig_network, gr_network, source_weights_df)
weights_settings_loi = lapply(weights_settings_loi,add_hyperparameters_parameter_settings, lr_sig_hub = 0.25,gr_hub = 0.5,ltf_cutoff = 0,algorithm = "PPR",damping_factor = 0.8,correct_topology = TRUE)
doMC::registerDoMC(cores = 8)
output_characterization = parallel::mclapply(weights_settings_loi[1:3],evaluate_model,lr_network,sig_network, gr_network,settings, mc.cores = 3)
}

}
